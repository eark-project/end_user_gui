<query xmlns="http://exist.sourceforge.net/NS/exist" method="json" cache="yes">
  <text>
    <![CDATA[
    xquery version "3.0";
    
    declare namespace ead="urn:isbn:1-931666-22-9";
    declare namespace xlink="http://www.w3.org/1999/xlink";
    declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
    declare option output:method "json";
    declare option output:media-type "application/json";
    
    let $titleQuery := '<title>'
    
    for $doc in collection('/db/apps/eark')
    
    let $archDescNode := $doc//ead:archdesc
    let $title := $doc//ead:eadheader//ead:titleproper
    let $id := substring( string(($archDescNode//ead:dao/@id)[1]), 10,36)
    
    where (
        ($id != '')
        and
        (
          <query>          
        )
    )
    return <package id="{$id}" title="{$title}" description="{$archDescNode/ead:bioghist//text()}" />
    ]]>
  </text>
  <!--
xquery version "3.0";
    declare namespace ead="urn:isbn:1-931666-22-9";
    declare namespace xlink="http://www.w3.org/1999/xlink";
    declare namespace output = "http://www.w3.org/2010/xslt-xquery-serialization";
    declare option output:method "json";
    declare option output:media-type "application/json";
    for $docs in collection('/db/apps/eark')
    for $title in $docs//ead:dao
    (:  :for $title in $docs//ead:dao:)
    (:  :let $packageId := substring( string($title/@id), 10,36):)
    (:  :where contains($title/ead:daodesc/ead:p, '') :)
    (:  :group by $packageId:)    
    let $packageId := substring( string($title/@id), 10,36)
    where contains($title/ead:daodesc/ead:p, '<title>')
    group by $packageId
    return $packageId
    
    (: return <item id="{string($title/@id)}" link="{string($title/@xlink:href)}" title="{string($title/ead:daodesc/ead:p)}"/> :)
-->
</query>